# Posit Workbench

Posit Workbench within Dash, delivers RStudio, JupyterLab and VS Code IDE and Jupyter. all in one place. It gives data teams the IDEs they love, and IT the control and governance needed for secure, compliant work.

## Tutorials

### Accessing RStudio

1.  Login into Dash Workbench - <https://dash-workbench-dev.azure.defra.cloud/>

2.  A Single Sign On will come up. It will recognize your profile, yet if prompted to add your credentials then do it.

    ```{r  echo=FALSE, out.width = '100%'}

    knitr::include_graphics("images/rst_1.png")
    ```

    ```{r echo=FALSE, out.width = '100%'}

    knitr::include_graphics("images/rst_2.png")
    ```

3.  This will open RStudio Pro. If you work with Databricks then select the Databricks tab underneath RStudio under Session Credentials.

    ```{r echo=FALSE, out.width = '100%'}

    knitr::include_graphics("images/rst_3.png")
    ```

#### Username characters warning

Apostrophes and non-ASCII characters cannot be used in RStudio usernames; i.e. if your username is `dara.Ã³briain@defra.gov.uk` or `bobby.o'brien@defra.gov.uk`, it will not work. Please contact [dashplatformsupport\@defra.gov.uk](mailto:dashplatformsupport@defra.gov.uk) for help.

### Quitting a session and signing out

If you close the RStudio window but keep other tabs in the browser open, and then reopen RStudio through Databricks, your username and password will be saved and it takes you straight back to RStudio.

To sign out of RStudio on the DASH Platform, click on the **Sign out** icon next to your username at the top right hand side of your screen. You will need to enter your username and password again to get into RStudio, but your console and environment won't be cleared. Please sign out when you are finished working in RStudio on the platform.

If you click on the orange **Quit current R session** icon also at the top right, you will close the current session, including clearing your console and environment.Quitting RStudio

```{r, echo=FALSE, out.width = '100%'}

knitr::include_graphics("images/rst_4.png")
```

## Working with data {#rstudio-data}

### R Studio workspace

When working in RStudio on the DASH Platform it is possible to upload files directly into your RStudio workspace through the upload button in the Files pane. This should only be used to load un-restricted data items. Your personal workspace in RStudio, including code, files, and data, should be treated as transient since this may be cleared if the cluster is restarted (which happens periodically to refresh the configuration).

Any important data should be transferred to the Lab zone in the data lake, see the [data lake chapter](datalake.qmd).

Any code or documentation should be backed up in a GitHub repository, see [GitHub section](#rstudio-github).

::: callout-important
It is important that you **back up any files** you keep in your DASH Platform R workspace, and the recommendation is to do so using GitHub to host your code and outputs. You can also export file to your local machine. Otherwise **you may lose your work** if there is a restart of the RStudio cluster. Save any data in your folder in the lab zone as detailed in the [data lake chapter](datalake.qmd#lab-zone).
:::

### Backing up your workspace

Whenever the RStudio cluster you are using is restarted, all your files are wiped from your RStudio workspace. We will let you know ahead of scheduled cluster restarts, but it is also possible that the cluster needs to be restarted unexpectedly.

Therefore you need to back up your work on a regular basis. The recommended way is to do so via GitHub, see section x

If you can't back up your files via GitHub, it is also possible to download scripts and outputs such as figures to your local machine.

-   On the right hand side under Files, select the files you want to download to your local machine\
-   Click on More \> Export...\
-   Rename the files if required, then click **Download**\
-   The files will appear in your **Downloads** folder on your local machine

### Working with data

**Read data from Unity Catalog**

There are several ways to read data from Databricks. One is through brickster library and the other is through sparklyr library. I will showcase each bellow.

To read Volume data from Databricks from Unity Catalog first check if you have access to data you intend to work with.

1.  Login into **Databricks**
2.  Go to **Catalog**
3.  See under **My Organisation** & **Delta Shares Received**

**Read data with brickster (**see link <https://databrickslabs.github.io/brickster/articles/setup-auth.html> )

As I have access to data and want to read volume data, I run the code in R file in RStudio

``` r
library(brickster)
 
# read a volume, change the path
file <- db_volume_read(
  '/Volumes/tst1_dash_lab/soundscapes_restricted/shared_external_volume/penguins.csv',
  tempfile(),
  perform_request = TRUE)
 
penguins <- read.csv(file)
x    <- penguins$body_mass_g
print(x)
 
gentoo <- subset(penguins, species == "Gentoo")
print(gentoo)
 
gentoo <- subset(penguins, species == "Gentoo")
 
```

And to save data do the bellow into RStudio work space

``` r
write.csv(gentoo,"gentoo.csv", row.names = FALSE)
```

If you want to save the gentoo data back to Volume but distinct from penguin.csv from which was derived then do this:

``` r
db_volume_write(
  '/Volumes/tst1_dash_lab/soundscapes_restricted/shared_external_volume/gentoo.csv',
  'gentoo.csv',
  overwrite = TRUE,
  perform_request = TRUE)
```

**Reading data with sparklyr** (see link <https://www.databricks.com/glossary/sparklyr> ).

Before reading the data, first we need to connect to Databricks.

1.  First login into Workspace and select RStudio and select Databricks

```{r  echo=FALSE, out.width = '100%'}

knitr::include_graphics("images/databricks_connection_1.png")



```

2. Now you're signed in. On the right hand side, you need to see a tab - Databricks - and see the clusters. I have 4 of them. This means there is no need for any credentials, RStudio does that for you. Now you want to make your way to data.

```{r  echo=FALSE, out.width = '100%'}

knitr::include_graphics("images/databricks_connection_2.png")

```

3.  Read data by passing the Cluster id into spark_connect function and also the version. Copy the code bellow and replace the parameters with the ones you get once logged in.

```{r  echo=FALSE, out.width = '100%'}

knitr::include_graphics("images/databricks_connection_3.png")
```

``` r
library(sparklyr)
library(pysparklyr)

# Use an all purpose cluster
sc <- spark_connect(
  cluster_id = "0717-160441-e0z99iuh",
  method = "databricks_connect", 
  version = "17.0"
)
```

4.  The other way to is to use serveless cluster, where there is no need to add any cluster ID as this is managed for you already.

``` r
# Use serverless cluster -
library(sparklyr)
library(pysparklyr)

sc <- spark_connect(
  serverless = TRUE,
  method = "databricks_connect", 
  version = "15.4"
)
```

As you've made your way to the clusters now we need to read data

``` r
# Set the database where the table is located
database_name <- "shared_external_volume"

# Use spark_read_table() function to read the table
data_tbl <- spark_read_table(sc, in_database(database_name, "gentoo.csv"))
```

## FAQs

### R version

There are multiple versions of R=("4.4.2" "4.4.0" "4.3.2" "4.3.1" "4.3.0" "4.2.2") . To check versions of R press down arrow and you should see the versions.

```{r  echo=FALSE, out.width = '100%'}


knitr::include_graphics("images/wrkbnch_rstudio_versions.png")
```

## Visual Code on Workbench

VS Code on Workbench integrated with Databricks simplifies authentification process as it is done through Databricks OAuth credentials.

Select VS Code and select Databricks connection under Session Credentials.

```{r echo=FALSE, out.width = '100%'}

knitr::include_graphics("images/workbench_vscode_1.png") 
```

As you can see on the right hand side in the corner there is a Databricks connection setup for you.

```{r echo=FALSE, out.width = '100%'}

knitr::include_graphics("images/workbench_vscode_2.png") 
```

### Working with data in VS Code

**Read data from Unity Catalog**

To read Volume data from Databricks from Unity Catalog first check if you have access to data you intend to work with.

1.  Login into **Databricks**
2.  Go to **Catalog**
3.  You should see data under **My Organisation** & **Delta Shares Received**

As I have access to data and want to read volume data, and transform it into pandas data frame will use this as a case study. However, in workspace client there is no need to add the HOST and Token variables as this was already done automatically for you.

``` python
# Import required packages  
import pandas as pd 
from databricks.sdk 
import WorkspaceClient from io import BytesIO 

# Set up workspace connection 
w = WorkspaceClient() 

# Read file from UNity catalog volume 
response = w.files.download("/Volumes/tst1_dash_lab/soundscapes_restricted/shared_external_volume/penguins.csv")

downloaded_file = response.contents.read()

# Read downloaded file to Pandas dataframe. 
df = pd.read_csv(BytesIO(downloaded_file))

# Open file to upload 
adelie = df[df['species'] == 'Adelie']

adelie.to_csv("/tmp/adelie.csv", index=False)
```

You can also write file to Unity Catalog Volume

``` python
# Write file to Unity Catalog Volume  

with open("/tmp/adelie.csv", "rb") as f:     
  csv = f.read() 
  
w.files.upload("/Volumes/tst1_dash_lab/soundscapes_restricted/shared_external_volume/adelie.csv", csv)
```

## Migration of projects to Workbench

There are two methods for migrating projects from different old IDE's to Workbench

a\. By **Exporting** the project folder from RStudio (Databricks) and **Uploading** the zipped by choosing '**Choose File'** into RStudio Workbench.

```{r echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rstudio_export_upload.png")

```

b\. By using **Version Control - Github**. For this you need to have Github handle. See bellow steps for **Steps in R projects migration** and **Steps in Python project migration**

### Steps in R projects migration

1.  If you have Version Control (Github) set up on your project, jump straight to Step 13 within this page. If you did not have Version Control applied to the projects in RStudio then it is necessary to create a New Repository using the [Defra Data Science Centre of Excellence GitHub](https://github.com/Defra-Data-Science-Centre-of-Excellence).

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_1.png")
```

2.  Give an intuitive unique name to the new repo. Make sure the new repo is ticked as Internal.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_2.png")
```

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_4.png")
```

3.  Press Create repository

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_5.png")
```

4.  Go to the Home directory in RStudio Databricks.

5.  Navigate to File -\> New Project -\> Version Control

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_6a.png")
```

6.  Select Git

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_7.png")
```

7.  Add in the repository URL link obtained from Github - see second picture where to copy the link from. Make sure it is an HTTPS link.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_8.png")
```

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_8a.png")
```

8.  Add the link obtained above into Repository URL

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_9.png")
```

9.  Choose the R Version your project was developed in. The R Version will depend on the [Databricks Runtime](https://docs.databricks.com/aws/en/release-notes/runtime/). You can find out the version by typing `version` in the console.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_10.png")
```

10. Add your Github username and Personal Access token (see second picture).

::: {.callout-tip title="Obtain Personal Access Token"}
The Personal Access token can be obtained By going to GitHub Profile, Settings, Developer section. Choose the type of token you want. Copy the token, saved it safely as this token cannot be seen again. And paste it into 'RStudio Personal access token' tab
:::

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_11.png")
```

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_13.png")
```

11. After completing the steps above the new project is set locally, into RStudio Databricks, just as below.

Navigate into the older project and copy all files from the project into new repo created. At this stage Version Control is now applied to your project.

You now need to push onto Github, under your repo. Before pushing to Github make sure the code / app / etc works.

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_15.png")
```

12. Go to Git tab within RStudio you'll see some files to be pushed onto Github.

::: callout-important
Before you commit, **make sure you `gitignore` sensitive data**, and check the files are safe to be pushed on Github.

Tick all the files (**not data or any folder containing sensitive data**) and press Commit. Add a note to remind you what is the commit about.

Press Push button under Git tab. Then navigate to Github repo and check if all the files are there. These files should be there.
:::

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_16.png")
```

13. Open the [Workbench](https://dash-workbench-dev.azure.defra.cloud) .Select RStudio -\> Start Session to open RStudio IDE.

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_19a.png")
```

14. Go to Github, to the new repo created/existing repo (make sure the project is pushed to Github), and copy the HTTPS link

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_19.png")
```

15. In RStudio Workbench, Drop down File -\> New Project

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_21.png")
```

16. Choose Version Control

```{r, echo=FALSE, out.width = '100%'}

knitr::include_graphics("images/rprojmigrtation_22.png")
```

17. Choose Git

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_23.png")
```

18. Paste the HTTPS repo url within Repository url section

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_24.png")
```

19. Choose which R Version the project was created and Push Create Project

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_25.png")
```

20. And finally, the project is now migrated into the new Workbench RStudio.

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/rprojmigrtation_27.png")
```

### Steps in Python project migration

1.  If you have Version Control (Github) set up on your project, go to Step 16 for the actual project to be pulled into Posit Workbench. If you do not have a Version Control functionality applied to the python projects then it is necessary to create a New Repository under <https://github.com/Defra-Data-Science-Centre-of-Excellence.>

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_1.png") 
```

2.  Give an intuitive unique name to the new repo. Make sure the new repo is ticked as Internal (within 'Choose visibility' section).

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_2.png")
```

3.  Press Create repository

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_3.png") 
```

4.  And the repo is created under Defra-Data-Science-Centre-Of-Excellence project <!--#  -->

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_4.png")
```

5.  Then open VSCode and press Clone Repository.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_5.png")
```

6.  A 'Clone from Github' message will appear

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_6.png")
```

7.  If you are signed into Github, then it will automatically recognise the repositories created by you just as below. Choose the repo you have created above.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_7.png")
```

8.  Choose a folder to clone

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_8.png")
```

9.  Open the cloned repository

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_9.png")
```

10. The cloned repository should be empty. Right click and Add Folder to Workspace

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_10.png")
```

11. I selected all the files you want to add and press open

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_11.png")
```

12. Select 'Yes' to committing the changes. Then add some text within the Changes tab and press Commit.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_14.png")
```

13. A message will appear saying 'Make sure you configure your "user.name" and "user.email" in git. Go to the terminal, within VSCode and add you defra username and your name:

    `$ git config --global user.name "John Doe"`

    `$ git config --global user.email johndoe@example.com`

    **NOTE: More information about adding your credentials - at this link** - <https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup>

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_15.png")
```

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_16.png")
```

14. Then select Push - this will push it to Github. If you navigate to your repo on Github, you should then see your local changes to the repo to Github.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_17.png")
```

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_18.png")  
```

15. As the project is now on Github, go to Workbench <https://dash-workbench-dev.azure.defra.cloud/> and pull the project into the new workspace.
16. Open the VS Code.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_19.png") 
```

17. Choose Initialise Repository.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_20.png") 
```

18. A new window comes up and choose allow.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_21.png") 
```

19. Copy the code and Certificate to Github

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_22.png") 
```

20. Press Open and as signed into Github a Device Activation will come up.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_23.png") 
```

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_24.png") 
```

21. Paste the code you've copied above.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_25.png") 
```

22. Choose Clone repository

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_26.png") 
```

23. A new tab 'The extension Github wants to sign in Github' should come up. Choose allow.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_28.png") 
```

24. Press Authorise Visual-Studio-Code.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_29.png") 
```

25. GitHub will ask for Authentication through the autheticator app.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_30.png") 
```

26. A confirmation in format as bellow should come up. Now you can use VSCode within Workbench to apply Git Version control functionality to your projects.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_31.png") 
```

27. If still signed into Github (which you will since the above has confirmed the configuration) choose the project to be cloned into Workbench.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_7.png") 
```

28. And tick the box trust the authors.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_32.png") 
```

29. Open the cloned repository. After opening, you should see migrated project within workbench.

```{r , echo=FALSE, out.width = '100%'}
knitr::include_graphics("images/projmigr_vscode_33.png") 
```
